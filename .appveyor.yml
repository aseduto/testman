
#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
#image: Visual Studio 2017
image: Ubuntu

build: off

environment:
  coverall:
    secure: 5ek2mNQ+B0FBBBizf4VQnJ5d131L13D8PoMUuujXI9BwMz0yxBR9yxG+iTekt2Ku



# scripts to run before build
before_build:



# to run your custom scripts instead of automatic MSBuild
build_script:
    - dotnet restore ./depsman.csproj
    - dotnet publish -c Release -o out1 ./depsman.csproj
    - dotnet publish -c Release -o out2 ./depsman.csproj


#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
  

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
before_test:
   

# scripts to run after tests
after_test:

# to run your custom scripts instead of automatic tests
test_script:
    - git clone https://github.com/lucaslorentz/minicover.git
    - cd minicover
    - dotnet restore
    - dotnet publish ./src/MiniCover/MiniCover.csproj -o out -c Release
    - cd ..
    - dotnet ./minicover/src/MiniCover/out/dotnet-minicover.dll instrument --workdir ./ --assemblies ./out1/**/*.dll --sources *.cs
    - dotnet  ./out1/depsman.dll
    - ls
    #- cd tools
    #- dotnet minicover report --workdir ../ --threshold 90
    #- pwsh: ls env: | ? {-Not ($_.name -match 'coverall')}
    - pwsh: $ll = dotnet ./minicover/src/MiniCover/out/dotnet-minicover.dll report --workdir ./ --threshold 50; $ll | oh; $r = [System.Text.RegularExpressions.Regex]::IsMatch($ll, "\| Program\.cs \|   19  \|        10      \|   52.63 %  \|"); $rr = "Failed"; if($r){$rr="Passed";};Add-AppveyorTest -Name "Minicover Master" -Framework "Integration" -FileName "program.cs" -Outcome $rr; 
    #- dotnet ./minicover/src/minicover/out/dotnet-minicover.dll coverallsreport --commit %APPVEYOR_REPO_COMMIT% --service-name appveyor --output coverall.json --service-job-id %APPVEYOR_BUILD_NUMBER% --repo-token %coverall% --branch %APPVEYOR_REPO_BRANCH% --remote origin --remote-url https://github.com/aseduto/testman.git --commit-message "%APPVEYOR_REPO_COMMIT_MESSAGE%"
    - pwsh: $o = "-------------------"; $o | oh
    - pwsh: rm "coverage.*"; rm minicover -force -recurse;
    - git clone https://github.com/aseduto/minicover.git
    - cd minicover
    #- git checkout coverall
    - git checkout fix/lambda
    - dotnet publish ./src/MiniCover/MiniCover.csproj -o out2 -c Release
    - cd ..
    - dotnet ./minicover/src/MiniCover/out2/dotnet-minicover.dll instrument --workdir ./ --assemblies ./out2/**/*.dll --sources *.cs
    - dotnet  ./out2/depsman.dll
    - ls
    #- pwsh: $ll = dotnet ./minicover/src/minicover/out2/dotnet-minicover.dll report --workdir ./ --threshold 50; $ll | oh; [System.Text.RegularExpressions.Regex]::IsMatch($ll, "\| Program\.cs \|   16  \|        9      \|   52.63 %  \|") | oh;
    - pwsh: $ll = dotnet ./minicover/src/MiniCover/out2/dotnet-minicover.dll report --workdir ./ --threshold 50; $ll | oh; $r = [System.Text.RegularExpressions.Regex]::IsMatch($ll, "\| Program\.cs \|   19  \|        10      \|   52.63 %  \|"); $rr = "Failed"; if($r){$rr="Passed";};Add-AppveyorTest -Name "Minicover fix coverage" -Framework "Integration" -FileName "program.cs" -Outcome $rr; 
    #- dotnet ./minicover/src/minicover/out2/dotnet-minicover.dll coverallreport --id %APPVEYOR_REPO_COMMIT% --servicename appveyor --output coverall.json --job %APPVEYOR_BUILD_NUMBER% --token %coverall% --branch %APPVEYOR_REPO_BRANCH% --remote origin --remote-url https://github.com/aseduto/testman.git --post https://coveralls.io/api/v1/jobs --threshold 50 --msg "%APPVEYOR_REPO_COMMIT_MESSAGE%" 
    - dotnet ./minicover/src/MiniCover/out2/dotnet-minicover.dll coverallsreport --commit %APPVEYOR_REPO_COMMIT% --service-name appveyor --output coverall.json --service-job-id %APPVEYOR_BUILD_NUMBER% --repo-token %coverall% --branch %APPVEYOR_REPO_BRANCH% --remote origin --remote-url https://github.com/aseduto/testman.git --commit-message "%APPVEYOR_REPO_COMMIT_MESSAGE%"
   
# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
#- path: '.\test\bin\Win32\Release\mg.pdb'
#  name: mg.pdb
#- path: win-release.zip
#  name: win-release

 


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!

   

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  #- do something

# on build failure
on_failure:
 # - do something

# after build failure or success
on_finish:
  #- do something


#---------------------------------#
#         notifications           #
#---------------------------------#

notifications:

  # Email
  - provider: Email
    to:
      - aseduto@hotmail.com
    subject: 'Build {{status}}'                  # optional
    message: "{{message}}, {{commitId}}, ..."    # optional
    on_build_status_changed: true

 


